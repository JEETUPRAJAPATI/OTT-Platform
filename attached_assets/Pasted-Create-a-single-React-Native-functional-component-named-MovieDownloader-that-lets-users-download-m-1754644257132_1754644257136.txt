Create a single React Native functional component named "MovieDownloader" that lets users download movies from archive.org by searching the title, selecting quality, and tracking progress.

Requirements:

1. **Search Functionality**
   - Use the official Internet Archive search API:
     https://archive.org/advancedsearch.php?q=title:(MOVIE_NAME)+AND+mediatype:(movies)&fl=identifier,title&rows=1&page=1&output=json
   - Search by movie title (entered by the user) and filter only for movies (mediatype: movies).
   - If no result found, show a toast message "Movie not found".

2. **Metadata & File Fetching**
   - Once an identifier is found, call:
     https://archive.org/metadata/{identifier}
   - Parse available files and filter video formats (.mp4, .mkv, .webm).
   - Detect and group by quality based on filename (e.g., 1080p, 720p, 480p).
   - Extract file size in MB and format type (MP4, MKV, etc.).

3. **UI Layout**
   - Text input for movie title.
   - Search button.
   - Show "Download" button only if a valid movie is found.
   - Modal pop-up for quality selection (shows: "Quality - Size - Format").
   - Progress bar during download with percentage and MB downloaded.
   - Cancel button for ongoing downloads.
   - Retry button if a download fails.

4. **Download Functionality**
   - Use `expo-file-system` for downloads (so it works on iOS & Android).
   - Save to the device's Downloads folder (or app’s document directory if restricted).
   - Show live download progress (percentage & size).
   - On success: toast "Download completed. Saved to Downloads."
   - On failure: toast "Download failed."

5. **Error Handling**
   - Graceful handling for:
     - Network errors
     - File not available in required quality
     - API errors
   - Retry option after failure.

6. **Performance & Code Quality**
   - **Do not create multiple duplicate components** — everything in one clean functional component.
   - Separate logic into internal functions:
     - `searchMovie(title)`
     - `getMovieFiles(identifier)`
     - `downloadMovie(url, filename)`
   - Use async/await and proper try/catch.
   - No unnecessary re-renders.
   - Works without additional wrappers.

7. **Example Workflow**
   - User enters movie name → Clicks Search → If found, show Download button → Click → Modal with quality options → Select quality → Download starts → Progress visible → On complete, toast success.

Deliver:
- Fully working React Native code (hooks-based).
- Compatible with Expo (expo-file-system for downloads, react-native-paper or similar for UI).
- Proper toasts and progress tracking implemented.
